//
//  ProfileRegisterInteractor.swift
//  ProfileRegister
//
//  Created by Yoojin Park on 2022/07/09.
//  Copyright (c) 2022 kr.mash-up. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import Models

protocol ProfileRegisterBusinessLogic {
    func selectKeywords(_ keywords: ProfileRegister.SelectKeywords.Request)
    func selectAnswers(_ answers: ProfileRegister.SelectAnswers.Request)
    func didTapUserInfoPageNextButton(_ info: ProfileRegister.DidTapFirstPageNext.Request)
    func fetchPrevPage()
    func fetchNextPage()
    func uploadImage(_ image: ProfileRegister.UploadImage.Request)
    func imageRemoved(_ image: UIImage)
    func registerProfile()
}

protocol ProfileRegisterDataStore {

}

class ProfileRegisterInteractor: ProfileRegisterBusinessLogic, ProfileRegisterDataStore {
    var presenter: ProfileRegisterPresentationLogic?
    var worker: ProfileRegisterWorker?

    typealias URLString = String

    private let pageSize: Int = 4
    private var pageNumber: Int = 1

    private var selectedKeywords: [Keyword] = []
    private var selectedImages: [UIImage] = []
    private var selectedImageUrls: [String] = []
    private var userInfo: UserInfo = .init()
    private var selectedAnswers: [Answer] = []

    init(worker: ProfileRegisterWorker = ProfileRegisterWorker()) {
        self.worker = worker
    }
    
    // Input Flow
    
    func didTapUserInfoPageNextButton(_ info: ProfileRegister.DidTapFirstPageNext.Request) {
        self.userInfo = UserInfo(name: info.name, gender: info.gender, birth: info.birth, address: info.address, career: info.career)
    }

    func uploadImage(_ image: ProfileRegister.UploadImage.Request) {
        guard let worker = worker else {
            return
        }
        Task {
            do {
                let urlString = try await worker.updateImage(image: image.image)
                selectedImageUrls.append(urlString)
                selectedImages.append(image.image)
                presenter?.presentUploadImage(response: .init(image: image.image))
            }
            catch {
                print(error.localizedDescription)
            }
        }
    }

    func imageRemoved(_ image: UIImage) {
        if let firstIndex = selectedImages.firstIndex(where: { $0 == image }) {
            selectedImages.remove(at: firstIndex)
            selectedImageUrls.remove(at: firstIndex)
        }
        presenter?.presentDeleteImage(response: .init(images: selectedImages))
    }

    func selectKeywords(_ keywords: ProfileRegister.SelectKeywords.Request) {
        selectedKeywords = keywords.keywords.map {
            Keyword(id: $0.keywordID, keyword: $0.keyword)
        }
    }

    func selectAnswers(_ answers: ProfileRegister.SelectAnswers.Request) {
        selectedAnswers = answers.answers.map {
            Answer(questionID: $0.questionId, answer: $0.answer)
        }
    }
    
    // Paging Flow
    
    func fetchPrevPage() {
        if pageNumber > 1 {
            pageNumber -= 1
        }
    }

    func fetchNextPage() {
        if pageNumber < pageSize {
            pageNumber += 1
            print(pageNumber)
            switch pageNumber {
            case 1:
                self.fetchFirstPage()
            case 2:
                self.fetchImages()
            case 3:
                self.fetchKeywords()
            default:
                self.fetchQuestions()
            }
        }
    }

    private func fetchFirstPage() {
        presenter?.presentFirstPage()
    }

    private func fetchImages() {
        presenter?.presentImagePage(
            response: .init(
                images: selectedImages, pageNumber: pageNumber
            )
        )
    }

    private func fetchKeywords() {
        print("Hello")
        guard let worker = worker else {
            return
        }
        print("a")
        Task {
            do {
                let keywords = try await worker.fetchKeywords()
                print(keywords)
                presenter?.presentKeywordPage(response: .init(keywords: keywords, selectedKeywords: selectedKeywords, pageNumber: pageNumber))
            } catch {

            }
        }
    }

    func fetchQuestions() {
        guard let worker = worker else {
            return
        }
        Task {
            do {
                let questions = try await worker.fetchQuestions()
                presenter?.presentQuestionPage(response: .init(questions: questions, pageNumber: pageNumber))
            } catch {

            }
        }
    }

    func registerProfile() {

    }
}
