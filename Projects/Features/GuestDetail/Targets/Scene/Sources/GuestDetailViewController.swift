//
//  GuestDetailViewController.swift
//  
//
//  Created by Woody on 2022/07/20.
//  Copyright (c) 2022 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import CarouselLayout
import DesignSystem
import GuestDetailRouter
import GuestDetailRoutingProtocol
import UIKit

import SnapKit

protocol GuestDetailDisplayLogic: AnyObject {
    func displayGuest(viewModel: GuestDetail.GetGuest.ViewModel)
}

struct GuestDetailViewModel {
    var name: String
    var age: Int
    var address: String
    var career: String
    var images: [UserProfileImagewCellViewModel]
    var keywords: [String]
    var answers: [String]
}

public final class GuestDetailViewController: UIViewController, GuestDetailDisplayLogic {
    var interactor: GuestDetailBusinessLogic?
    public var router: (GuestDetailRoutingLogic & GuestDetailDataPassing)?
    
    // MARK: Object lifecycle
    
    public override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    public required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: Setup
    
    private func setup() {
        let viewController = self
        let interactor = GuestDetailInteractor()
        let presenter = GuestDetailPresenter()
        let router = GuestDetailRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: UI

    private let navigationView: UIView = {
        return $0
    }(UIView())

    private lazy var backButton: UIImageView = {
        $0.image = .create(.ic_arrow_back)
        $0.isUserInteractionEnabled = true
        $0.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(backButtonDidTap)))
        return $0
    }(UIImageView())

    private let scrollView: UIScrollView = {
        return $0
    }(UIScrollView())

    private let contentView: UIView = {
        let v = UIView()
        v.backgroundColor = Pallete.Light.background.color
        return v
    }()
    private let stackView: UIStackView = {
        $0.translatesAutoresizingMaskIntoConstraints = false
        $0.alignment = .center
        $0.axis = .horizontal
        $0.distribution = .fill
        $0.spacing = 0
        return $0
    }(UIStackView())

    private let nameLabel: UILabel = {
        // MARK: 영어이름일경우
        $0.font = .h1()
        $0.textColor = Pallete.Light.grey800.color
        return $0
    }(UILabel())

    private let ageLabel: UILabel = {
        $0.font = .h2(name: .montserrat)
        $0.textColor = Pallete.Light.grey200.color
        return $0
    }(UILabel())

    private let likeButton: ImageMTButton = {
        return $0
    }(ImageMTButton(customButtonType: .iconMainLight))

    private let addressStackView: UIStackView = {
        $0.axis = .horizontal
        $0.distribution = .fill
        $0.alignment = .center
        $0.spacing = 2
        return $0
    }(UIStackView())

    private let addressLabel: UILabel = {
        $0.font = .h5()
        $0.textColor = Pallete.Light.grey600.color
        return $0
    }(UILabel())

    private let addressDescriptionLabel: UILabel = {
        $0.font = .subtitle2()
        $0.textColor = Pallete.Light.grey400.color
        $0.text = "에 살아요"
        return $0
    }(UILabel())

    private let careerStackView: UIStackView = {
        $0.axis = .horizontal
        $0.distribution = .fill
        $0.alignment = .center
        $0.spacing = 2
        return $0
    }(UIStackView())

    private let careerLabel: UILabel = {
        $0.font = .h5()
        $0.textColor = Pallete.Light.grey600.color
        return $0
    }(UILabel())

    private let careerDescriptionLabel: UILabel = {
        $0.font = .subtitle2()
        $0.textColor = Pallete.Light.grey400.color
        $0.text = "로 일해요"
        return $0
    }(UILabel())

    private lazy var collectionView: UICollectionView = {
        let layout = HorizontalCarouselLayout()
        layout.delegate = self
        let v = UICollectionView(frame: .zero, collectionViewLayout: layout)
        v.backgroundColor = Pallete.Light.background.color
        v.register(UserProfileImageCollectionViewCell.self, forCellWithReuseIdentifier: "UserProfileImageCollectionViewCell")
        v.dataSource = self
        v.delegate = self
        v.layer.masksToBounds = false
        v.contentInset = .init(top: 0, left: collectionViewInset, bottom: 0, right: collectionViewInset)
        v.showsHorizontalScrollIndicator = false
        v.decelerationRate = .fast
        return v
    }()

    private lazy var pageControl: UIPageControl = {
        let v = UIPageControl()
        return v
    }()

    var viewModel: GuestDetailViewModel? {
        didSet {
            self.nameLabel.text = viewModel?.name ?? ""
            self.addressLabel.text = viewModel?.address ?? ""
            self.ageLabel.text = "\(viewModel?.age ?? 0)"
            self.careerLabel.text = viewModel?.career ?? ""

            DispatchQueue.main.async { [weak self] in
                self?.collectionView.reloadData()
            }
        }
    }
    // MARK: View lifecycle
    
    public override func viewDidLoad() {
        super.viewDidLoad()
        setUI()
    }

    public override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        interactor?.loadGuest()
    }

    private func setUI() {
        self.view.backgroundColor = Pallete.Light.background.color

        self.view.addSubview(self.scrollView)
        self.view.addSubview(self.navigationView)
        self.contentView.addSubview(self.nameLabel)
        self.contentView.addSubview(self.ageLabel)
        self.contentView.addSubview(self.likeButton)
        self.contentView.addSubview(self.addressStackView)
        self.contentView.addSubview(self.careerStackView)
        self.contentView.addSubview(self.collectionView)
        self.contentView.addSubview(self.pageControl)
        self.scrollView.addSubview(self.contentView)
        self.navigationView.addSubview(self.backButton)
        self.addressStackView.addArrangedSubview(self.addressLabel)
        self.addressStackView.addArrangedSubview(self.addressDescriptionLabel)
        self.careerStackView.addArrangedSubview(self.careerLabel)
        self.careerStackView.addArrangedSubview(self.careerDescriptionLabel)

        self.navigationView.snp.makeConstraints { make in
            make.top.equalTo(self.view.safeAreaLayoutGuide)
            make.leading.trailing.equalToSuperview()
            make.height.equalTo(56)
        }
        self.backButton.snp.makeConstraints { make in
            make.centerY.equalToSuperview()
            make.leading.equalToSuperview().inset(20)
        }
        self.scrollView.snp.makeConstraints { make in
            make.leading.trailing.bottom.equalToSuperview()
            make.top.equalTo(self.navigationView.snp.bottom)
        }
        self.contentView.snp.makeConstraints { make in
            make.edges.equalToSuperview()
            make.width.equalTo(self.scrollView)
            make.height.equalTo(self.scrollView).priority(.low)
        }
        self.nameLabel.snp.makeConstraints { make in
            make.top.equalToSuperview().offset(16)
            make.leading.equalToSuperview().offset(32)
        }
        self.ageLabel.snp.makeConstraints { make in
            make.leading.equalTo(self.nameLabel.snp.trailing).offset(4)
            make.firstBaseline.equalTo(self.nameLabel.snp.firstBaseline)
        }
        self.likeButton.snp.makeConstraints { make in
            make.trailing.equalToSuperview().inset(32)
            make.centerY.equalTo(self.nameLabel)
            make.width.height.equalTo(48)
        }
        self.addressStackView.snp.makeConstraints { make in
            make.top.equalTo(nameLabel.snp.bottom).offset(10)
            make.leading.equalTo(nameLabel)
        }
        self.careerStackView.snp.makeConstraints { make in
            make.top.equalTo(addressStackView.snp.bottom).offset(4)
            make.leading.equalTo(addressStackView)
        }
        self.collectionView.snp.makeConstraints { make in
            make.top.equalTo(careerStackView.snp.bottom).offset(50)
            make.leading.trailing.equalToSuperview()
            let width: CGFloat = UIScreen.main.bounds.width - collectionViewInset * 2
            let height: CGFloat = width * 1.33
            make.height.equalTo(height)
        }
    }
    
    // MARK: Display Logic

    func displayGuest(viewModel: GuestDetail.GetGuest.ViewModel) {
        self.viewModel = viewModel.guest
    }

    @objc func backButtonDidTap() {
        router?.removeFromParent()
    }

}

extension GuestDetailViewController: UICollectionViewDataSource {
    public func collectionView(
        _ collectionView: UICollectionView,
        numberOfItemsInSection section: Int
    ) -> Int {
        return viewModel?.images.count ?? 0
    }

    public func collectionView(
        _ collectionView: UICollectionView,
        cellForItemAt indexPath: IndexPath
    ) -> UICollectionViewCell {
        guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: "UserProfileImageCollectionViewCell", for: indexPath) as? UserProfileImageCollectionViewCell else {
            return UICollectionViewCell()
        }
        cell.viewModel = viewModel?.images[indexPath.item]
        return cell
    }
}

extension GuestDetailViewController: UICollectionViewDelegateFlowLayout {
    fileprivate var collectionViewInset: CGFloat {
        return 40
    }

    fileprivate var itemSpacing: CGFloat {
        return -30
    }

    public func scrollViewWillEndDragging(
        _ scrollView: UIScrollView,
        withVelocity velocity: CGPoint,
        targetContentOffset: UnsafeMutablePointer<CGPoint>
    ) {
        let itemWidth: CGFloat = collectionView.bounds.width - collectionViewInset * 2
        let cellWidthIncludingSpacing = itemWidth + itemSpacing

        var offset = targetContentOffset.pointee
        let index = (offset.x + scrollView.contentInset.left) / cellWidthIncludingSpacing
        var roundedIndex = round(index)

        if scrollView.contentOffset.x > targetContentOffset.pointee.x {
            roundedIndex = floor(index)
        } else {
            roundedIndex = ceil(index)
        }

        offset = CGPoint(x: roundedIndex * cellWidthIncludingSpacing - scrollView.contentInset.left, y: -scrollView.contentInset.top)
        targetContentOffset.pointee = offset
    }
}

extension GuestDetailViewController: HorizontalCarouselLayoutDelegate {
    public func collectionView(
        _ collectionView: UICollectionView
    ) -> CGSize {
        let width: CGFloat = collectionView.bounds.width - collectionViewInset * 2
        let height: CGFloat = width * 1.33
        return .init(width: width, height: height)
    }

    public func collectionView(
        _ collectionView: UICollectionView,
        layout collectionViewLayout: UICollectionViewLayout
    ) -> CGFloat {
        return itemSpacing
    }


}
